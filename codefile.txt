Objective:
The purpose of this assignment is to explore the power of programmable data planes using
the P4 language to solve limitations of traditional fixed-function networking devices. The
assignment involves identifying a networking scenario(sample use cases given),
implementing a P4 program, and demonstrating the solution in a simulated environment
(e.g., Mininet with BMv2).
1. Select a Use Case Scenario
Choose a networking scenario where P4 is beneficial over traditional fixed function packet
processing (or you can propose your own network scenario). Sample use cases are attached
at the end of the document.
2. Design and Implement a P4 Program
Develop a custom P4_16 program that supports the chosen use case. Your program should
include:
- Custom header definitions (if required)
- Parsing logic for new or modified headers
- Tables and actions that implement the forwarding or processing behavior
- Control block logic that integrates everything
3. Simulate and Test
Use Mininet + BMv2 + P4Runtime shell or a Python controller to:
- Run your topology
- Deploy your P4 program
- Install flow rules
- Demonstrate packet flow consistent with your use case
4. Write a Report
Prepare a concise report including:
- The networking challenge addressed
- Why P4 is beneficial in this context
- Overview of your P4 program and its logic
- Results and validation from your test environment
Deliverables:
- P4 program (`your_program.p4`)
- Topology and rule-installation scripts (Mininet + p4runtime-shell)
- Demonstration outputs (CLI logs, screenshots, or packet captures)


my work ( havent run it yet)


tiwary@Tiwary-QE73456K:~/p4$ ls
Makefile      echo_service.py   send_packet.py  sfc_topo.py
codefile.txt  install_rules.py  sfc.p4
tiwary@Tiwary-QE73456K:~/p4$ echo echo_service && cat echo_service.py  && echo install_rules && cat install_rules.py  && echo send_packet && cat send_packet.py  && echo sfc && cat sfc.p4 && echo sfc_topo && cat sfc_topo.py && echo Makefile && cat Makefile
echo_service
from scapy.all import *

def echo_packet(pkt):
    # Send the packet back unchanged
    sendp(pkt, iface="s1-eth0", verbose=True)

sniff(iface="s1-eth0", prn=echo_packet)
install_rules
import p4runtime_lib.bmv2
import p4runtime_lib.helper

def writeSfcRules(p4info_helper, sw):
    # Table entry: From h1 to s1
    table_entry = p4info_helper.buildTableEntry(
        table_name="MyIngress.sfc_forward",
        match_fields={
            "standard_metadata.ingress_port": 1,
            "hdr.sfc.chain_id": 1,
            "hdr.sfc.index": 0
        },
        action_name="MyIngress.forward",
        action_params={"port": 2}
    )
    sw.WriteTableEntry(table_entry)

    # Table entry: From s1 to s2
    table_entry = p4info_helper.buildTableEntry(
        table_name="MyIngress.sfc_forward",
        match_fields={
            "standard_metadata.ingress_port": 2,
            "hdr.sfc.chain_id": 1,
            "hdr.sfc.index": 0
        },
        action_name="MyIngress.set_index_and_forward",
        action_params={"new_index": 1, "port": 3}
    )
    sw.WriteTableEntry(table_entry)

    # Table entry: From s2 to h2
    table_entry = p4info_helper.buildTableEntry(
        table_name="MyIngress.sfc_forward",
        match_fields={
            "standard_metadata.ingress_port": 3,
            "hdr.sfc.chain_id": 1,
            "hdr.sfc.index": 1
        },
        action_name="MyIngress.remove_sfc_and_forward",
        action_params={"port": 4}
    )
    sw.WriteTableEntry(table_entry)

def main():
    p4info_file_path = 'sfc.p4info.txt'
    bmv2_file_path = 'sfc.json'
    p4info_helper = p4runtime_lib.helper.P4InfoHelper(p4info_file_path)

    sw = p4runtime_lib.bmv2.Bmv2SwitchConnection(
        name='s1',
        address='127.0.0.1:50051',
        device_id=0
    )
    sw.MasterArbitrationUpdate()
    writeSfcRules(p4info_helper, sw)
    sw.shutdown()

if __name__ == '__main__':
    main()
send_packet
from scapy.all import *

class SFC(Packet):
    name = "SFC"
    fields_desc = [ShortField("chain_id", 0),
                   ByteField("index", 0)]

bind_layers(IP, SFC, proto=0xFD)

packet = Ether(dst="ff:ff:ff:ff:ff:ff") / IP(dst="10.0.0.4", proto=0xFD) / SFC(chain_id=1, index=0) / Raw(load="Hello SFC")
sendp(packet, iface="h1-eth0", verbose=True)
sfc
#include <core.p4>
#include <v1model.p4>

// Header Definitions
header ethernet_t {
    bit<48> dstAddr;
    bit<48> srcAddr;
    bit<16> etherType;
}

header ipv4_t {
    bit<4>  version;
    bit<4>  ihl;
    bit<8>  diffserv;
    bit<16> totalLen;
    bit<16> identification;
    bit<3>  flags;
    bit<13> fragOffset;
    bit<8>  ttl;
    bit<8>  protocol;
    bit<16> hdrChecksum;
    bit<32> srcAddr;
    bit<32> dstAddr;
}

header sfc_t {
    bit<16> chain_id; // Identifies the service chain
    bit<8>  index;    // Indicates the current position in the chain
}

struct metadata {
    /* Empty for this example */
}

struct headers {
    ethernet_t ethernet;
    ipv4_t     ipv4;
    sfc_t      sfc;
}

// Parser
parser MyParser(packet_in packet,
                out headers hdr,
                inout metadata meta,
                inout standard_metadata_t standard_metadata) {
    state start {
        packet.extract(hdr.ethernet);
        transition select(hdr.ethernet.etherType) {
            0x0800: parse_ipv4;
            default: accept;
        }
    }
    state parse_ipv4 {
        packet.extract(hdr.ipv4);
        transition select(hdr.ipv4.protocol) {
            0xFD: parse_sfc; // Custom protocol number for SFC
            default: accept;
        }
    }
    state parse_sfc {
        packet.extract(hdr.sfc);
        transition accept;
    }
}

// Checksum Verification (Placeholder)
control MyVerifyChecksum(inout headers hdr, inout metadata meta) {
    apply { }
}

// Ingress Control
control MyIngress(inout headers hdr,
                  inout metadata meta,
                  inout standard_metadata_t standard_metadata) {
    action drop() {
        mark_to_drop(standard_metadata);
    }

    action forward(bit<9> port) {
        standard_metadata.egress_spec = port;
    }

    action set_index_and_forward(bit<8> new_index, bit<9> port) {
        hdr.sfc.index = new_index;
        standard_metadata.egress_spec = port;
    }

    action remove_sfc_and_forward(bit<9> port) {
        hdr.sfc.setInvalid();
        standard_metadata.egress_spec = port;
    }

    table sfc_forward {
        key = {
            standard_metadata.ingress_port: exact;
            hdr.sfc.chain_id: exact;
            hdr.sfc.index: exact;
        }
        actions = {
            forward;
            set_index_and_forward;
            remove_sfc_and_forward;
            drop;
        }
        size = 1024;
        default_action = drop;
    }

    apply {
        if (hdr.sfc.isValid()) {
            sfc_forward.apply();
        } else {
            drop(); // Drop packets without SFC header
        }
    }
}

// Egress Control (Placeholder)
control MyEgress(inout headers hdr,
                 inout metadata meta,
                 inout standard_metadata_t standard_metadata) {
    apply { }
}

// Checksum Computation (Placeholder)
control MyComputeChecksum(inout headers hdr, inout metadata meta) {
    apply { }
}

// Deparser
control MyDeparser(packet_out packet, in headers hdr) {
    apply {
        packet.emit(hdr.ethernet);
        if (hdr.ipv4.isValid()) {
            packet.emit(hdr.ipv4);
            if (hdr.sfc.isValid()) {
                packet.emit(hdr.sfc);
            }
        }
    }
}

// V1Switch Architecture
V1Switch(
    MyParser(),
    MyVerifyChecksum(),
    MyIngress(),
    MyEgress(),
    MyComputeChecksum(),
    MyDeparser()
) main;
sfc_topo
from mininet.net import Mininet
from mininet.node import Controller
from mininet.cli import CLI
from mininet.log import setLogLevel, info
from mininet.link import TCLink

# Note: Assumes BMv2 switch is configured externally (e.g., via P4 Behavioral Model)
class BMv2Switch(OVSKernelSwitch):
    def __init__(self, name, **params):
        OVSKernelSwitch.__init__(self, name, **params)
        self.switchPath = 'simple_switch'  # BMv2 switch binary

def sfcTopology():
    net = Mininet(controller=Controller, link=TCLink)

    # Add controller
    c0 = net.addController('c0')

    # Add BMv2 switch (requires external configuration with P4 program)
    s1 = net.addSwitch('s1', cls=OVSKernelSwitch, dpid='1')

    # Add hosts
    h1 = net.addHost('h1', ip='10.0.0.1/24')
    s1_host = net.addHost('s1', ip='10.0.0.2/24')  # Service 1
    s2_host = net.addHost('s2', ip='10.0.0.3/24')  # Service 2
    h2 = net.addHost('h2', ip='10.0.0.4/24')

    # Add links with specific ports
    net.addLink(h1, s1, port1=0, port2=1)
    net.addLink(s1_host, s1, port1=0, port2=2)
    net.addLink(s2_host, s1, port1=0, port2=3)
    net.addLink(h2, s1, port1=0, port2=4)

    # Start the network
    net.start()
    info("*** Network started\n")

    # Open CLI for interaction
    CLI(net)

    # Stop the network
    net.stop()

if __name__ == '__main__':
    setLogLevel('info')
    sfcTopology()
Makefile
# Makefile for P4 SFC Implementation
# Assumes Ubuntu 20.04+ with p4c, BMv2, Mininet, P4Runtime, and Scapy installed

# Variables
P4C = p4c
BMV2_SWITCH = simple_switch
BMV2_LOG = switch.log
MININET = python3 sfc_topo.py
P4_SRC = sfc.p4
P4_JSON = sfc.json
P4_P4INFO = sfc.p4info.txt
TOPO_SCRIPT = sfc_topo.py
RULES_SCRIPT = install_rules.py
SEND_SCRIPT = send_packet.py
ECHO_SCRIPT = echo_service.py
CAPTURE_FILE = capture.pcap
PCAP_DIR = .
BMV2_PID = bmv2.pid
MININET_PID = mininet.pid

# Default target
all: compile run

# Compile P4 program
compile:
    @echo "Compiling P4 program..."
    $(P4C) --std p4-16 -b bmv2 $(P4_SRC) -o $(P4_JSON) --p4runtime-files $(P4_P4INFO)

# Run the entire setup
run: start_bmv2 start_mininet install_rules run_demo

# Start BMv2 switch
start_bmv2:
    @echo "Starting BMv2 switch..."
    $(BMV2_SWITCH) --interface 1@veth1 --interface 2@veth2 --interface 3@veth3 --interface 4@veth4 \
        --grpc-server-addr 127.0.0.1:50051 $(P4_JSON) > $(BMV2_LOG) 2>&1 & echo $$! > $(BMV2_PID)
    @sleep 5  # Wait for BMv2 to initialize

# Start Mininet topology
start_mininet:
    @echo "Starting Mininet topology..."
    @sudo $(MININET) & echo $$! > $(MININET_PID) &
    @sleep 10  # Wait for Mininet to set up

# Install flow rules
install_rules:
    @echo "Installing flow rules..."
    @sudo python3 $(RULES_SCRIPT)

# Run demonstration
run_demo:
    @echo "Running demonstration..."
    @sudo mkdir -p $(PCAP_DIR)
    # Start echo services on s1 and s2
    @sudo ip netns exec s1 python3 $(ECHO_SCRIPT) & echo $$! > s1.pid &
    @sudo ip netns exec s2 python3 $(ECHO_SCRIPT) & echo $$! > s2.pid &
    # Start packet capture on h2
    @sudo ip netns exec h2 tcpdump -i h2-eth0 -w $(PCAP_DIR)/$(CAPTURE_FILE) & echo $$! > tcpdump.pid &
    @sleep 2
    # Send packet from h1
    @sudo ip netns exec h1 python3 $(SEND_SCRIPT)
    @sleep 2
    # Stop packet capture
    @sudo kill $$(cat tcpdump.pid)
    @sudo rm tcpdump.pid

# Clean up
clean:
    @echo "Cleaning up..."
    @sudo killall $(BMV2_SWITCH) mininet python3 tcpdump || true
    @sudo rm -f $(BMV2_LOG) $(BMV2_PID) $(MININET_PID) s1.pid s2.pid tcpdump.pid
    @sudo rm -f $(P4_JSON) $(P4_P4INFO) $(PCAP_DIR)/$(CAPTURE_FILE)
    @sudo mn -c || true  # Clean Mininet state

# Stop running processes
stop:
    @echo "Stopping running processes..."
    @sudo killall $(BMV2_SWITCH) mininet python3 tcpdump || true
    @sudo rm -f $(BMV2_PID) $(MININET_PID) s1.pid s2.pid tcpdump.pid
    @sudo mn -c || true

.PHONY: all compile run start_bmv2 start_mininet install_rules run_demo clean stop
tiwary@Tiwary-QE73456K:~/p4$
